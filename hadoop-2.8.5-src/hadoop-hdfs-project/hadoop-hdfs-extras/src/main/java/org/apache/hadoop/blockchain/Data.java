package org.apache.hadoop.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class Data extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b50604051620029e8380380620029e88339818101604052810190620000379190620000de565b81600281905550806003819055506040516200005390620000b9565b604051809103906000f08015801562000070573d6000803e3d6000fd5b50600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000143565b611482806200156683390190565b600081519050620000d88162000129565b92915050565b60008060408385031215620000f257600080fd5b60006200010285828601620000c7565b92505060206200011585828601620000c7565b9150509250929050565b6000819050919050565b62000134816200011f565b81146200014057600080fd5b50565b61141380620001536000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630f8f2de3146100675780637175d0fb146100855780639d879847146100b5578063b0f8c8a0146100bf578063c98f501b146100db578063ddc0c2e3146100f7575b600080fd5b61006f610127565b60405161007c91906111b2565b60405180910390f35b61009f600480360381019061009a9190610d32565b61016e565b6040516100ac9190611177565b60405180910390f35b6100bd61018a565b005b6100d960048036038101906100d49190610d5b565b6101eb565b005b6100f560048036038101906100f09190610c04565b610206565b005b610111600480360381019061010c9190610bdb565b6104e9565b60405161011e91906111b2565b60405180910390f35b6000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000806000838152602001908152602001600020549050919050565b6000610194610127565b1461019e57600080fd5b6101a6610532565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b80600080848152602001908152602001600020819055505050565b6000610210610127565b14158015610221575060008a8a9050115b801561023d5750600254888890508161023657fe5b048a8a9050145b801561024e57508585905088889050145b801561025f57508383905086869050145b801561027057508181905084849050145b61027957600080fd5b6104dd6040518060a001604052808c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018a8a808060200260200160405190810160405280939291908181526020016000905b82821015610347578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906102f0565b505050505081526020018888808060200260200160405190810160405280939291908181526020016000905b828210156103ca578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610373565b505050505081526020018686808060200260200160405190810160405280939291908181526020016000905b8282101561044d578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906103f6565b505050505081526020018484808060200260200160405190810160405280939291908181526020016000905b828210156104d0578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610479565b5050505050815250610565565b50505050505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610560423260405160200161054a9291906110a1565b6040516020818303038152906040526000610882565b905090565b606081600001515167ffffffffffffffff8111801561058357600080fd5b506040519080825280602002602001820160405280156105b25781602001602082028036833780820191505090505b5090506105bd610ab0565b60005b8360000151518110156107dd5760018382815181106105db57fe5b60200260200101901515908115158152505061060d8460000151828151811061060057fe5b60200260200101516108e0565b915060005b6002548110156107cf5761064183602001518660000151848151811061063457fe5b6020026020010151610a7a565b83602001818152505060035483602001518161065957fe5b0683600001516000600a811061066b57fe5b602002018181525050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e27046e1866020015184815181106106c257fe5b60200260200101516040518060400160405280896040015187815181106106e557fe5b602002602001015181526020018960600151878151811061070257fe5b60200260200101518152508860800151868151811061071d57fe5b602002602001015187600001516040518563ffffffff1660e01b815260040161074994939291906110f9565b60206040518083038186803b15801561076157600080fd5b505afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107999190610d09565b6107c25760008483815181106107ab57fe5b6020026020010190151590811515815250506107cf565b8080600101915050610612565b5080806001019150506105c0565b503273ffffffffffffffffffffffffffffffffffffffff167f832d24d62f00c7832e45c669a1d1cb81f45a875efcc77b77fe4391525958744284600001518460405161082a929190611140565b60405180910390a261083a610532565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600060208201835110156108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c290611192565b60405180910390fd5b60008260200184015190508091505092915050565b6108e8610ab0565b6108f0610ab0565b6108f8610127565b816020018181525050600080600085815260200190815260200160002054905063ffffffff8160001c1682600001516001600a811061093357fe5b60200201818152505063ffffffff602082901c60001c1682600001516002600a811061095b57fe5b60200201818152505063ffffffff604082901c60001c1682600001516003600a811061098357fe5b60200201818152505063ffffffff606082901c60001c1682600001516004600a81106109ab57fe5b60200201818152505063ffffffff608082901c60001c1682600001516005600a81106109d357fe5b60200201818152505063ffffffff60a082901c60001c1682600001516006600a81106109fb57fe5b60200201818152505063ffffffff60c082901c60001c1682600001516007600a8110610a2357fe5b60200201818152505063ffffffff60e082901c60001c1682600001516008600a8110610a4b57fe5b602002018181525050600182600001516009600a8110610a6757fe5b6020020181815250508192505050919050565b60008282604051602001610a8f9291906110cd565b6040516020818303038152906040528051906020012060001c905092915050565b6040518060400160405280610ac3610ad0565b8152602001600081525090565b604051806101400160405280600a90602082028036833780820191505090505090565b600081359050610b0281611381565b92915050565b60008083601f840112610b1a57600080fd5b8235905067ffffffffffffffff811115610b3357600080fd5b602083019150836040820283011115610b4b57600080fd5b9250929050565b60008083601f840112610b6457600080fd5b8235905067ffffffffffffffff811115610b7d57600080fd5b602083019150836020820283011115610b9557600080fd5b9250929050565b600081519050610bab81611398565b92915050565b600081359050610bc0816113af565b92915050565b600081359050610bd5816113c6565b92915050565b600060208284031215610bed57600080fd5b6000610bfb84828501610af3565b91505092915050565b60008060008060008060008060008060a08b8d031215610c2357600080fd5b60008b013567ffffffffffffffff811115610c3d57600080fd5b610c498d828e01610b52565b9a509a505060208b013567ffffffffffffffff811115610c6857600080fd5b610c748d828e01610b08565b985098505060408b013567ffffffffffffffff811115610c9357600080fd5b610c9f8d828e01610b08565b965096505060608b013567ffffffffffffffff811115610cbe57600080fd5b610cca8d828e01610b08565b945094505060808b013567ffffffffffffffff811115610ce957600080fd5b610cf58d828e01610b08565b92509250509295989b9194979a5092959850565b600060208284031215610d1b57600080fd5b6000610d2984828501610b9c565b91505092915050565b600060208284031215610d4457600080fd5b6000610d5284828501610bc6565b91505092915050565b60008060408385031215610d6e57600080fd5b6000610d7c85828601610bc6565b9250506020610d8d85828601610bb1565b9150509250929050565b6000610da38383610f02565b60408301905092915050565b6000610dbb838361100e565b60208301905092915050565b6000610dd3838361106c565b60208301905092915050565b610df0610deb826112f4565b611346565b82525050565b610dff8161120b565b610e098184611283565b9250610e14826111cd565b8060005b83811015610e45578151610e2c8782610d97565b9650610e3783611242565b925050600181019050610e18565b505050505050565b6000610e5882611216565b610e62818561128e565b9350610e6d836111d7565b8060005b83811015610e9e578151610e858882610daf565b9750610e908361124f565b925050600181019050610e71565b5085935050505092915050565b610eb481611221565b610ebe818461129f565b9250610ec9826111e7565b8060005b83811015610efa578151610ee18782610dc7565b9650610eec8361125c565b925050600181019050610ecd565b505050505050565b610f0b8161122c565b610f1581846112aa565b9250610f20826111f1565b8060005b83811015610f51578151610f388782610dc7565b9650610f4383611269565b925050600181019050610f24565b505050505050565b610f628161122c565b610f6c81846112b5565b9250610f77826111f1565b8060005b83811015610fa8578151610f8f8782610dc7565b9650610f9a83611269565b925050600181019050610f7b565b505050505050565b6000610fbb82611237565b610fc581856112c0565b9350610fd0836111fb565b8060005b83811015611001578151610fe88882610dc7565b9750610ff383611276565b925050600181019050610fd4565b5085935050505092915050565b61101781611306565b82525050565b61102681611312565b82525050565b60006110396014836112d1565b91507f736c6963696e67206f7574206f662072616e67650000000000000000000000006000830152602082019050919050565b6110758161133c565b82525050565b6110848161133c565b82525050565b61109b6110968261133c565b61136a565b82525050565b60006110ad828561108a565b6020820191506110bd8284610ddf565b6014820191508190509392505050565b60006110d9828561108a565b6020820191506110e9828461108a565b6020820191508190509392505050565b60006102408201905061110f6000830187610f59565b61111c6040830186610df6565b61112960c0830185610f59565b611137610100830184610eab565b95945050505050565b6000604082019050818103600083015261115a8185610fb0565b9050818103602083015261116e8184610e4d565b90509392505050565b600060208201905061118c600083018461101d565b92915050565b600060208201905081810360008301526111ab8161102c565b9050919050565b60006020820190506111c7600083018461107b565b92915050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050919050565b6000819050602082019050919050565b600060029050919050565b600081519050919050565b6000600a9050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006112ed8261131c565b9050919050565b60006112ff8261131c565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061135182611358565b9050919050565b600061136382611374565b9050919050565b6000819050919050565b60008160601b9050919050565b61138a816112e2565b811461139557600080fd5b50565b6113a181611306565b81146113ac57600080fd5b50565b6113b881611312565b81146113c357600080fd5b50565b6113cf8161133c565b81146113da57600080fd5b5056fea26469706673582212200f6dc3a7b13b69057e35bd1861cda05813474ff7372662cc42854f5b5bceab9164736f6c634300060c0033608060405234801561001057600080fd5b50611462806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e27046e114610030575b600080fd5b610190600480360361024081101561004757600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b828210156100fc578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100a8565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101a8565b60405180821515815260200191505060405180910390f35b60006101b26112ea565b6040518060400160405280876000600281106101ca57fe5b60200201518152602001876001600281106101e157fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061021457fe5b602002015160006002811061022557fe5b602002015181526020018860006002811061023c57fe5b602002015160016002811061024d57fe5b6020020151815250815260200160405180604001604052808860016002811061027257fe5b602002015160006002811061028357fe5b602002015181526020018860016002811061029a57fe5b60200201516001600281106102ab57fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102d657fe5b60200201518152602001856001600281106102ed57fe5b602002015181525081604001819052506060600a67ffffffffffffffff8111801561031757600080fd5b506040519080825280602002602001820160405280156103465781602001602082028036833780820191505090505b50905060005b600a81101561038b578481600a811061036157fe5b602002015182828151811061037257fe5b602002602001018181525050808060010191505061034c565b50600061039882846103b8565b14156103a9576001925050506103b0565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506103e661131d565b6103ee610527565b905080608001515160018651011461040557600080fd5b61040d611364565b6040518060400160405280600081526020016000815250905060005b86518110156104a0578387828151811061043f57fe5b60200260200101511061045157600080fd5b6104918261048c8560800151600185018151811061046b57fe5b60200260200101518a858151811061047f57fe5b6020026020010151610d14565b610da6565b91508080600101915050610429565b506104c38183608001516000815181106104b657fe5b6020026020010151610da6565b9050610509856000015186602001516104db84610e57565b85604001516104ed8a60400151610e57565b87606001516104ff8960000151610e57565b8960200151610ef1565b6105195760019350505050610521565b600093505050505b92915050565b61052f61131d565b60405180604001604052807f23daacdc9423593cbee532e0861b988e99ec6787e785b159b283823b3c0e344881526020017f1c956c267f2f7430c53432225967102b04f4a74e0f1ffd909358b6b87c27c2c28152508160000181905250604051806040016040528060405180604001604052807f13c58a43c867faf36f07e0bdb0475e28020e6154cec3e73db02e1f063fc8de3081526020017f0df1c1c5fab0ef2f4673e7c4d31c6448fb56c3f8f844bce5b6a3a8c5611b0c1b815250815260200160405180604001604052807f05cb41171a681fa9ced09d4d7cf4f9a26c346a0312ecb85f57062699198be6e781526020017f06a685479a576f0463bf5912496e33fcec25d6dad4fd7313f352a2735daffac68152508152508160200181905250604051806040016040528060405180604001604052807f26fbf825f02a5078b9bfcb11cd6149ef00ea2e2d2b0c8a792384b2c113478ad481526020017f114d541a5f82bf18fee18118310b637b6d235ba7ba12b22326bcfa044dc20717815250815260200160405180604001604052807f0be632c389d47f0f404cafd536f4a84737d4e8f9b4740e225ec6680b4d90dd2381526020017f061a74b2dd1d772f6665cb08b255edbf26297fe9fb0a43f89ae8e8dead3ddaea8152508152508160400181905250604051806040016040528060405180604001604052807f1d1c5bbfd32f5ceb9ef7898c891b77997064cc97933c21c23eedb0de899b580081526020017f02c8ee5f91d73def4fe11061ed61108215538d5b97da31d748fa0d6f435ea968815250815260200160405180604001604052807f0d73cddc9916a73bf68e75ba8c113531a900ab1e8274e65f1cd463486394aa3b81526020017f1d01adae1f5709d1c4e255dd0589875a0a19fbc8d07dda1bb7536e63065d000a8152508152508160600181905250600b67ffffffffffffffff811180156107f357600080fd5b5060405190808252806020026020018201604052801561082d57816020015b61081a611364565b8152602001906001900390816108125790505b50816080018190525060405180604001604052807f2279faf61ad5c4385882a9d02bc0cf9a1b3007d41d52b1482546eda02bd3dbb781526020017f2ff44ca0d2ee3cb74829c77e6f597fc56738c7f508cc5a6880b990a7582faf18815250816080015160008151811061089c57fe5b602002602001018190525060405180604001604052807f0ea79b43109fece72ff0c797664e9607ff9f61a22099898b85e28ba6655522c781526020017f1aa6abfd3c74c19e13b3e302ea138ecd36274fa109f03dd71cd267c58daa0302815250816080015160018151811061090d57fe5b602002602001018190525060405180604001604052807f0a333496078d57147d2c6d64830e42ee4c4035fde050f5584008717d99d7b0c981526020017f0a9fc8356f22a48a26f73d0510a6d66686170c9c618479df7cda298967112e2a815250816080015160028151811061097e57fe5b602002602001018190525060405180604001604052807f23d9b60d59a8b3ee13a1829b9310d30774466006f58823f5f64bbd2657ccb4b181526020017f0e3d743b5a2a872c3b27325fd55a435c3c5a0c5d78c7fcea21d0719865be503681525081608001516003815181106109ef57fe5b602002602001018190525060405180604001604052807f1fe475790b63c7107900036c1c6b4f3677ac780bfe014e797a3a986d4caf87f181526020017f26280932baaedd10db26ac5a5baeea8bf2655cb0b27f65897f7da599078994828152508160800151600481518110610a6057fe5b602002602001018190525060405180604001604052807f05bbfde9f8703c62a744ec4fe341a3981cef2b3daa8140452300f88b6d40dd2381526020017f217422b15055cb9eacf8e5e2a0420e302bd1d9e33860bbd09cf602aa282fba5f8152508160800151600581518110610ad157fe5b602002602001018190525060405180604001604052807f28eb7dcfb7dd974c220ea2ffc156e87b867e9184674c1f331dbf798fb7470db581526020017f1d251098af184c922182c6ee57679348c33ff07e9db0ee3d7e590a07b94111098152508160800151600681518110610b4257fe5b602002602001018190525060405180604001604052807f0ad0c51480e96a570820b40673dbcd740af1d93f32c6e0821c1d0c221fd6041b81526020017f2ba8171cc32c2941b523996b8f32e183170647814f30fad853f4d7f3d894a2a88152508160800151600781518110610bb357fe5b602002602001018190525060405180604001604052807f1b6126a5609b27d351723611f1a0bd05c4d03a66b706968111e3d63e8b2b4c1581526020017f1f1eed3203bb242c0dcdd8023a2d33c91054faba2c7d70967c046f89a15b2c8b8152508160800151600881518110610c2457fe5b602002602001018190525060405180604001604052807f042adc4ec6b92b1f09c18dc04ed396d1d54a6ff00796423bfd8267b2465def5181526020017f2c5b3bf41882956841dc6ba266454bd0eed5613d6dc7547d61ef895e07a9396d8152508160800151600981518110610c9557fe5b602002602001018190525060405180604001604052807f292052035125cf3026fbd945978540eb317eeef0001d3893ec0065d88e00f72581526020017f15236b596e8b50b7b4bdd3ed5d37cd3a1dd788f94d3a7375574c9fcb403342408152508160800151600a81518110610d0657fe5b602002602001018190525090565b610d1c611364565b610d2461137e565b836000015181600060038110610d3657fe5b602002018181525050836020015181600160038110610d5157fe5b6020020181815250508281600260038110610d6857fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610d9157610d93565bfe5b5080610d9e57600080fd5b505092915050565b610dae611364565b610db66113a0565b836000015181600060048110610dc857fe5b602002018181525050836020015181600160048110610de357fe5b602002018181525050826000015181600260048110610dfe57fe5b602002018181525050826020015181600360048110610e1957fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610e4257610e44565bfe5b5080610e4f57600080fd5b505092915050565b610e5f611364565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610e9c575060008360200151145b15610ec0576040518060400160405280600081526020016000815250915050610eec565b60405180604001604052808460000151815260200182856020015181610ee257fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610f0d57600080fd5b50604051908082528060200260200182016040528015610f4757816020015b610f34611364565b815260200190600190039081610f2c5790505b5090506060600467ffffffffffffffff81118015610f6457600080fd5b50604051908082528060200260200182016040528015610f9e57816020015b610f8b6113c2565b815260200190600190039081610f835790505b5090508a82600081518110610faf57fe5b60200260200101819052508882600181518110610fc857fe5b60200260200101819052508682600281518110610fe157fe5b60200260200101819052508482600381518110610ffa57fe5b6020026020010181905250898160008151811061101357fe5b6020026020010181905250878160018151811061102c57fe5b6020026020010181905250858160028151811061104557fe5b6020026020010181905250838160038151811061105e57fe5b60200260200101819052506110738282611083565b9250505098975050505050505050565b6000815183511461109357600080fd5b600083519050600060068202905060608167ffffffffffffffff811180156110ba57600080fd5b506040519080825280602002602001820160405280156110e95781602001602082028036833780820191505090505b50905060005b8381101561128c5786818151811061110357fe5b60200260200101516000015182600060068402018151811061112157fe5b60200260200101818152505086818151811061113957fe5b60200260200101516020015182600160068402018151811061115757fe5b60200260200101818152505085818151811061116f57fe5b60200260200101516000015160016002811061118757fe5b602002015182600260068402018151811061119e57fe5b6020026020010181815250508581815181106111b657fe5b6020026020010151600001516000600281106111ce57fe5b60200201518260036006840201815181106111e557fe5b6020026020010181815250508581815181106111fd57fe5b60200260200101516020015160016002811061121557fe5b602002015182600460068402018151811061122c57fe5b60200260200101818152505085818151811061124457fe5b60200260200101516020015160006002811061125c57fe5b602002015182600560068402018151811061127357fe5b60200260200101818152505080806001019150506110ef565b506112956113e8565b6000602082602086026020860160086107d05a03fa905080600081146112ba576112bc565bfe5b50806112c757600080fd5b6000826000600181106112d657fe5b602002015114159550505050505092915050565b60405180606001604052806112fd611364565b815260200161130a6113c2565b8152602001611317611364565b81525090565b6040518060a00160405280611330611364565b815260200161133d6113c2565b815260200161134a6113c2565b81526020016113576113c2565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806113d561140a565b81526020016113e261140a565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea2646970667358221220cf3262604fcc47d1f559deda73029d6ea02687893d3e602748f73fde0084dea964736f6c634300060c0033";

    public static final String FUNC_PEEK_SEED = "peek_seed";

    public static final String FUNC_VERIFY = "verify";

    public static final String FUNC_DNODE_INIT = "dnode_init";

    public static final String FUNC_ADD_DIGEST = "add_digest";

    public static final String FUNC_DEBUG_DIGEST = "debug_digest";

    public static final String FUNC_DEBUG_SEED = "debug_seed";

    public static final Event BLOCKREPORT_EVENT = new Event("BlockReport", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0x0f8a1235ca85060eD2496323cDfB01Caf4E1F9dC");
    }

    @Deprecated
    protected Data(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Data(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Data(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Data(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BlockReportEventResponse> getBlockReportEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BLOCKREPORT_EVENT, transactionReceipt);
        ArrayList<BlockReportEventResponse> responses = new ArrayList<BlockReportEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlockReportEventResponse typedResponse = new BlockReportEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.datanode = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.blocks = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.results = (List<Boolean>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BlockReportEventResponse> blockReportEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BlockReportEventResponse>() {
            @Override
            public BlockReportEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BLOCKREPORT_EVENT, log);
                BlockReportEventResponse typedResponse = new BlockReportEventResponse();
                typedResponse.log = log;
                typedResponse.datanode = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.blocks = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.results = (List<Boolean>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BlockReportEventResponse> blockReportEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLOCKREPORT_EVENT));
        return blockReportEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> peek_seed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PEEK_SEED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> verify(List<BigInteger> _block_ids, List<List<BigInteger>> _as, List<List<BigInteger>> _bs1, List<List<BigInteger>> _bs2, List<List<BigInteger>> _cs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VERIFY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_block_ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_as, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_bs1, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_bs2, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_cs, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> dnode_init() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DNODE_INIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> add_digest(BigInteger _block_id, byte[] _root) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADD_DIGEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_block_id), 
                new org.web3j.abi.datatypes.generated.Bytes32(_root)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> debug_digest(BigInteger _block_id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEBUG_DIGEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_block_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> debug_seed(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEBUG_SEED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Data load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Data(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Data load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Data(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Data load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Data(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Data load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Data(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Data> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Data> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Data> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Data> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class BlockReportEventResponse extends BaseEventResponse {
        public String datanode;

        public List<BigInteger> blocks;

        public List<Boolean> results;
    }
}
