package org.apache.hadoop.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class Data extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50604051612e9f380380612e9f8339818101604052604081101561003357600080fd5b8101908080519060200190929190805190602001909291905050508160018190555080600281905550604051610068906100cc565b604051809103906000f080158015610084573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506100d9565b61149e80611a0183390190565b611919806100e86000396000f3fe608060405234801561001057600080fd5b506004361061007f576000357c0100000000000000000000000000000000000000000000000000000000900480630205b545146100845780631b2b203b146101115780633c1a8f4a146101a8578063847ac28514610221578063e0ebbff814610355578063ff337e7614610577575b600080fd5b61010f6004803603606081101561009a57600080fd5b81019080803590602001906401000000008111156100b757600080fd5b8201836020820111156100c957600080fd5b803590602001918460018302840111640100000000831117156100eb57600080fd5b90919293919293908035906020019092919080359060200190929190505050610689565b005b6101926004803603604081101561012757600080fd5b810190808035906020019064010000000081111561014457600080fd5b82018360208201111561015657600080fd5b8035906020019184600183028401116401000000008311171561017857600080fd5b9091929391929390803590602001909291905050506106cf565b6040518082815260200191505060405180910390f35b61021f600480360360208110156101be57600080fd5b81019080803590602001906401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184600183028401116401000000008311171561020f57600080fd5b9091929391929390505050610715565b005b6102da6004803603602081101561023757600080fd5b810190808035906020019064010000000081111561025457600080fd5b82018360208201111561026657600080fd5b8035906020019184600183028401116401000000008311171561028857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061083b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031a5780820151818401526020810190506102ff565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610575600480360360c081101561036b57600080fd5b810190808035906020019064010000000081111561038857600080fd5b82018360208201111561039a57600080fd5b803590602001918460018302840111640100000000831117156103bc57600080fd5b9091929391929390803590602001906401000000008111156103dd57600080fd5b8201836020820111156103ef57600080fd5b8035906020019184602083028401116401000000008311171561041157600080fd5b90919293919293908035906020019064010000000081111561043257600080fd5b82018360208201111561044457600080fd5b8035906020019184602083028401116401000000008311171561046657600080fd5b90919293919293908035906020019064010000000081111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460208302840111640100000000831117156104bb57600080fd5b9091929391929390803590602001906401000000008111156104dc57600080fd5b8201836020820111156104ee57600080fd5b8035906020019184602083028401116401000000008311171561051057600080fd5b90919293919293908035906020019064010000000081111561053157600080fd5b82018360208201111561054357600080fd5b8035906020019184602083028401116401000000008311171561056557600080fd5b9091929391929390505050610986565b005b61060e6004803603604081101561058d57600080fd5b81019080803590602001906401000000008111156105aa57600080fd5b8201836020820111156105bc57600080fd5b803590602001918460018302840111640100000000831117156105de57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561064e578082015181840152602081019050610633565b50505050905090810190601f16801561067b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b8060008585604051808383808284378083019250505092505050908152602001604051809103902060000160008481526020019081526020016000208190555050505050565b6000808484604051808383808284378083019250505092505050908152602001604051809103902060000160008381526020019081526020016000205490509392505050565b600061076483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061083b565b511461076f57600080fd5b6107bc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610de1565b60008383604051808383808284378083019250505092505050908152602001604051809103902060010160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610836929190611823565b505050565b60606000826040518082805190602001908083835b602083106108735780518252602082019150602081019050602083039250610850565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561097a5780601f1061094f5761010080835404028352916020019161097a565b820191906000526020600020905b81548152906001019060200180831161095d57829003601f168201915b50505050509050919050565b60006109d58d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061083b565b51141580156109e7575060008a8a9050115b8015610a06575060026001540288889050816109ff57fe5b048a8a9050145b8015610a1757508585905088889050145b8015610a2857508383905086869050145b8015610a3957508181905084849050145b610a4257600080fd5b610c006040518060c001604052808e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152602001888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152602001868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152602001848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815250610e8a565b610c4d8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610de1565b60008d8d604051808383808284378083019250505092505050908152602001604051809103902060010160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610cc7929190611823565b50505050505050505050505050565b606060008484604051808383808284378083019250505092505050908152602001604051809103902060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dd35780601f10610da857610100808354040283529160200191610dd3565b820191906000526020600020905b815481529060010190602001808311610db657829003601f168201915b505050505090509392505050565b60604282326040516020018084815260200183805190602001908083835b60208310610e225780518252602082019150602081019050602083039250610dff565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140193505050506040516020818303038152906040529050919050565b606081602001515167ffffffffffffffff81118015610ea857600080fd5b50604051908082528060200260200182016040528015610ed75781602001602082028036833780820191505090505b50905060008083600001516040518082805190602001908083835b60208310610f155780518252602082019150602081019050602083039250610ef2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060608160010160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110215780601f10610ff657610100808354040283529160200191611021565b820191906000526020600020905b81548152906001019060200180831161100457829003601f168201915b5050505050905060005b84602001515181101561145457600184828151811061104657fe5b6020026020010190151590811515815250506060611081838760200151848151811061106e57fe5b602002602001015160025460015461159c565b905061108b6118a3565b6110c0856000016000896020015186815181106110a457fe5b602002602001015181526020019081526020016000205461171c565b905060005b600154811015611444578281815181106110db57fe5b6020026020010151826000600a81106110f057fe5b602002018181525050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e27046e160405180604001604052808b604001516002866001548b0201028151811061115b57fe5b602002602001015181526020018b6040015160016002876001548c020102018151811061118457fe5b6020026020010151815250604051806040016040528060405180604001604052808e606001516002896001548e020102815181106111be57fe5b602002602001015181526020018e60600151600160028a6001548f02010201815181106111e757fe5b6020026020010151815250815260200160405180604001604052808e608001516002896001548e0201028151811061121b57fe5b602002602001015181526020018e60800151600160028a6001548f020102018151811061124457fe5b602002602001015181525081525060405180604001604052808d60a001516002886001548d0201028151811061127657fe5b602002602001015181526020018d60a0015160016002896001548e020102018151811061129f57fe5b6020026020010151815250866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600260200280838360005b838110156113015780820151818401526020810190506112e6565b505050509050018460026000925b818410156113555782846020020151600260200280838360005b83811015611344578082015181840152602081019050611329565b50505050905001926001019261130f565b9250505083600260200280838360005b83811015611380578082015181840152602081019050611365565b5050505090500182600a60200280838360005b838110156113ae578082015181840152602081019050611393565b5050505090500194505050505060206040518083038186803b1580156113d357600080fd5b505afa1580156113e7573d6000803e3d6000fd5b505050506040513d60208110156113fd57600080fd5b810190808051906020019092919050505061143757600087858151811061142057fe5b602002602001019015159081151581525050611444565b80806001019150506110c5565b505050808060010191505061102b565b5083600001516040518082805190602001908083835b6020831061148d578051825260208201915060208101905060208303925061146a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390203273ffffffffffffffffffffffffffffffffffffffff167f601ee75c284d425f37c54b50c3fddf01ae71f64c68f58cd66491f2c58cf8e6cb866020015186604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561153f578082015181840152602081019050611524565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611581578082015181840152602081019050611566565b5050505090500194505050505060405180910390a350505050565b6060600082116115ab57600080fd5b60608267ffffffffffffffff811180156115c457600080fd5b506040519080825280602002602001820160405280156115f35781602001602082028036833780820191505090505b509050600085876040516020018083815260200182805190602001908083835b602083106116365780518252602082019150602081019050602083039250611613565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012060019004905084818161168157fe5b068260008151811061168f57fe5b6020026020010181815250506000600190505b8481101561170e5781876040516020018083815260200182815260200192505050604051602081830303815290604052805190602001206001900491508582816116e857fe5b068382815181106116f557fe5b60200260200101818152505080806001019150506116a2565b508192505050949350505050565b6117246118a3565b61172c6118a3565b600161012082015263ffffffff831661010082015263ffffffff64010000000084041660e082015263ffffffff6801000000000000000084041660c082015263ffffffff6c0100000000000000000000000084041660a082015263ffffffff700100000000000000000000000000000000840416608082015263ffffffff74010000000000000000000000000000000000000000840416606082015263ffffffff7801000000000000000000000000000000000000000000000000840416604082015263ffffffff7c0100000000000000000000000000000000000000000000000000000000840416602082015280915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061186457805160ff1916838001178555611892565b82800160010185558215611892579182015b82811115611891578251825591602001919060010190611876565b5b50905061189f91906118c6565b5090565b604051806101400160405280600a90602082028036833780820191505090505090565b5b808211156118df5760008160009055506001016118c7565b509056fea2646970667358221220754709bc45e925d1be009a2540569024ad6eb4810f047bf2f93972691838a91c64736f6c634300060c0033608060405234801561001057600080fd5b5061147e806100206000396000f3fe608060405234801561001057600080fd5b5060043610610048576000357c010000000000000000000000000000000000000000000000000000000090048063e27046e11461004d575b600080fd5b6101ad600480360361024081101561006457600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b82821015610119578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100c5565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101c5565b60405180821515815260200191505060405180910390f35b60006101cf611306565b6040518060400160405280876000600281106101e757fe5b60200201518152602001876001600281106101fe57fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061023157fe5b602002015160006002811061024257fe5b602002015181526020018860006002811061025957fe5b602002015160016002811061026a57fe5b6020020151815250815260200160405180604001604052808860016002811061028f57fe5b60200201516000600281106102a057fe5b60200201518152602001886001600281106102b757fe5b60200201516001600281106102c857fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102f357fe5b602002015181526020018560016002811061030a57fe5b602002015181525081604001819052506060600a67ffffffffffffffff8111801561033457600080fd5b506040519080825280602002602001820160405280156103635781602001602082028036833780820191505090505b50905060005b600a8110156103a8578481600a811061037e57fe5b602002015182828151811061038f57fe5b6020026020010181815250508080600101915050610369565b5060006103b582846103d5565b14156103c6576001925050506103cd565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050610403611339565b61040b610544565b905080608001515160018651011461042257600080fd5b61042a611380565b6040518060400160405280600081526020016000815250905060005b86518110156104bd578387828151811061045c57fe5b60200260200101511061046e57600080fd5b6104ae826104a98560800151600185018151811061048857fe5b60200260200101518a858151811061049c57fe5b6020026020010151610d30565b610dc2565b91508080600101915050610446565b506104e08183608001516000815181106104d357fe5b6020026020010151610dc2565b9050610526856000015186602001516104f884610e73565b856040015161050a8a60400151610e73565b876060015161051c8960000151610e73565b8960200151610f0d565b610536576001935050505061053e565b600093505050505b92915050565b61054c611339565b60405180604001604052807f1e707c57fab7a0c92edad734f81ba7293754eea4b9e3a5f9a6c62ad0f8c898ef81526020017f08b90a7eb8419f5fb32d6edf5456f235f1c3fecf2f4e6dfddecc9f45fe5d9a648152508160000181905250604051806040016040528060405180604001604052807f043956ec89eabec7b540c2ee42c8d1f90d875e9d8fc34cd2c3ffe520a99a692a81526020017f2f10e6cf3c0dd07b2a85075d36f398ae1ee0710fb6288345db3f00e7fff23401815250815260200160405180604001604052807f0ff32874321eafba61adb78fc26d4b5a283ecfdbea3202b73d35f624e65464b281526020017f117e8134ce6a36c2883a3c0caca24a033c0f0c1b6739af11d3242881e68acb7c8152508152508160200181905250604051806040016040528060405180604001604052807f20e3295036a1f494811ff8698c8bc8546259a0a888e76019d676a318437d53c281526020017f0159a66c1b588bc7abe8f36cded9fa072acf4d7f69dc0c6b5928261d72d34b9e815250815260200160405180604001604052807f10a0c196afec6679c8df51a7a4aad51e419cb76a6ad2b463c3f6d0aa95d2e01881526020017f28c0c91a628e2feb39ffd9c73a4356a5e7dbd632d086715c027958dca8490bac8152508152508160400181905250604051806040016040528060405180604001604052807f17a7a5a0dbf4c330ca531e3cb14b84c67e6749d647e77510713c088d15bffa4b81526020017f077544ededf9ffbcf53ca85849ad2093ef5b49b7e1f12610ff8ec13f3ae2dcba815250815260200160405180604001604052807f099c9f46bb6e674112255bf8e3a9a5ad03dee4dce706706e5d374acbae0a3a8b81526020017f2aa84c1cda0424f155dfebb0f43accd5827cba30f39a87b6fcee656b19c907238152508152508160600181905250600b67ffffffffffffffff8111801561081057600080fd5b5060405190808252806020026020018201604052801561084a57816020015b610837611380565b81526020019060019003908161082f5790505b50816080018190525060405180604001604052807f2d44f8f7b17efcf75d862409d667776035fc427716199a0e6d1133a12404145481526020017f070b42818ddf4f3fb534405eb8c28a25de4f001c4bd68aa01e5f0305b235455d81525081608001516000815181106108b957fe5b602002602001018190525060405180604001604052807f04545568ad0a625c1ec95b6d5d9b71e8f0843107e6c0d32e8c9d8a8e61feee5a81526020017f26593d865384bbb571d194264f1158a4e8a6498a0ecb561105c18b0adaa27bde815250816080015160018151811061092a57fe5b602002602001018190525060405180604001604052807f1a8bf24515c91adba0f3b3fdd2d9699772cb1bc1610f85ffb97a6b6402faf47781526020017f2b57d9b7f063878a9dc33f23ae217db0fe6b8284153d346cadfd68a0ecd1355a815250816080015160028151811061099b57fe5b602002602001018190525060405180604001604052807f29f92f4664920fd6bc2fc687b88b7bcfcc7a154bf4c82326fe6ed1028dbd1a8781526020017f13670cc9f454c574f70c5259891f84733fa9820e0c76aefb2ee5cfd892cc1db48152508160800151600381518110610a0c57fe5b602002602001018190525060405180604001604052807f0ee172a19ff4fa12107964a02c63423b98862ab3b5dc296e19ee32439c913d7f81526020017eca87b6a68dd534f70c20eb427d4618e28001e8dc1dbe9023d14c090da9fd678152508160800151600481518110610a7c57fe5b602002602001018190525060405180604001604052807f0b007c251d6dd3b35de2ff66ce879547e42aee05d4950b1509e0a305b4632a4181526020017f22763bc64f1206bc1733704b627ac5156d234988d58e1022ba1f5017831d141a8152508160800151600581518110610aed57fe5b602002602001018190525060405180604001604052807f12593c1fee0501c7fbf8745295b3d5e247028800ced32fa6d3d2b27b81eddd7e81526020017f1edeb2a187d93229a16495fc1358d312d977cf85d57c1bd462b9005f705918f98152508160800151600681518110610b5e57fe5b602002602001018190525060405180604001604052807f3011a21d2b36b34d917147235023b5e2d6ffedebc69fbb40b81f12181062136981526020017f2bdf548e1e91f796dd598d18fe4b42f90c1a69bc76af3ec5f8b6e3abda4c6df78152508160800151600781518110610bcf57fe5b602002602001018190525060405180604001604052807f0c09fda3bfbb76e83605a5e414833ddf1367959dc123f16e80ffee8ba2debf8581526020017f079d3e5456ade254f48f3bb88d65b7e1076631345aca22c5ba79aedf5eade6b38152508160800151600881518110610c4057fe5b602002602001018190525060405180604001604052807f27ec0671e205d329eb7b4b255af40c4e42b2ddf5b03da0a85e9902ebbcaecc1c81526020017f12646705e77e34dfd936f0f9da9a3cc322a958f69705051ab532ac7be00270388152508160800151600981518110610cb157fe5b602002602001018190525060405180604001604052807f2b29d1e3180ca8f7a725408cd612c74325abe6baf9336535f91d2e56ed23ad5381526020017f1c43fd05339b3d571d1f7a76de5eea4ffa39bb9f1d56d1f554219d866609efe78152508160800151600a81518110610d2257fe5b602002602001018190525090565b610d38611380565b610d4061139a565b836000015181600060038110610d5257fe5b602002018181525050836020015181600160038110610d6d57fe5b6020020181815250508281600260038110610d8457fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610dad57610daf565bfe5b5080610dba57600080fd5b505092915050565b610dca611380565b610dd26113bc565b836000015181600060048110610de457fe5b602002018181525050836020015181600160048110610dff57fe5b602002018181525050826000015181600260048110610e1a57fe5b602002018181525050826020015181600360048110610e3557fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610e5e57610e60565bfe5b5080610e6b57600080fd5b505092915050565b610e7b611380565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610eb8575060008360200151145b15610edc576040518060400160405280600081526020016000815250915050610f08565b60405180604001604052808460000151815260200182856020015181610efe57fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610f2957600080fd5b50604051908082528060200260200182016040528015610f6357816020015b610f50611380565b815260200190600190039081610f485790505b5090506060600467ffffffffffffffff81118015610f8057600080fd5b50604051908082528060200260200182016040528015610fba57816020015b610fa76113de565b815260200190600190039081610f9f5790505b5090508a82600081518110610fcb57fe5b60200260200101819052508882600181518110610fe457fe5b60200260200101819052508682600281518110610ffd57fe5b6020026020010181905250848260038151811061101657fe5b6020026020010181905250898160008151811061102f57fe5b6020026020010181905250878160018151811061104857fe5b6020026020010181905250858160028151811061106157fe5b6020026020010181905250838160038151811061107a57fe5b602002602001018190525061108f828261109f565b9250505098975050505050505050565b600081518351146110af57600080fd5b600083519050600060068202905060608167ffffffffffffffff811180156110d657600080fd5b506040519080825280602002602001820160405280156111055781602001602082028036833780820191505090505b50905060005b838110156112a85786818151811061111f57fe5b60200260200101516000015182600060068402018151811061113d57fe5b60200260200101818152505086818151811061115557fe5b60200260200101516020015182600160068402018151811061117357fe5b60200260200101818152505085818151811061118b57fe5b6020026020010151600001516001600281106111a357fe5b60200201518260026006840201815181106111ba57fe5b6020026020010181815250508581815181106111d257fe5b6020026020010151600001516000600281106111ea57fe5b602002015182600360068402018151811061120157fe5b60200260200101818152505085818151811061121957fe5b60200260200101516020015160016002811061123157fe5b602002015182600460068402018151811061124857fe5b60200260200101818152505085818151811061126057fe5b60200260200101516020015160006002811061127857fe5b602002015182600560068402018151811061128f57fe5b602002602001018181525050808060010191505061110b565b506112b1611404565b6000602082602086026020860160086107d05a03fa905080600081146112d6576112d8565bfe5b50806112e357600080fd5b6000826000600181106112f257fe5b602002015114159550505050505092915050565b6040518060600160405280611319611380565b81526020016113266113de565b8152602001611333611380565b81525090565b6040518060a0016040528061134c611380565b81526020016113596113de565b81526020016113666113de565b81526020016113736113de565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806113f1611426565b81526020016113fe611426565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea26469706673582212209af6e9624e7fd507e833fe4ca3e20fff783597be30c08b424f1e41b1ba19af8964736f6c634300060c0033";

    public static final String FUNC_PEEK_SEED = "peek_seed";

    public static final String FUNC_VERIFY = "verify";

    public static final String FUNC_DNODE_INIT = "dnode_init";

    public static final String FUNC_ADD_DIGEST = "add_digest";

    public static final String FUNC_DEBUG_DIGEST = "debug_digest";

    public static final String FUNC_DEBUG_SEED = "debug_seed";

    public static final Event BLOCKREPORT_EVENT = new Event("BlockReport", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1637332738022", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637080753645", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637333283032", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637071457356", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637662576855", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637082516099", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637077693246", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("5777", "0x115B0d58E11CE1aC1f6c9C708C02AccB9B002A94");
        _addresses.put("1637066550252", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637672661338", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
        _addresses.put("1637673700435", "0xCfEB869F69431e42cdB54A4F4f105C19C080A601");
    }

    @Deprecated
    protected Data(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Data(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Data(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Data(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BlockReportEventResponse> getBlockReportEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BLOCKREPORT_EVENT, transactionReceipt);
        ArrayList<BlockReportEventResponse> responses = new ArrayList<BlockReportEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlockReportEventResponse typedResponse = new BlockReportEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.datanode = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.blockpool = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.blocks = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.results = (List<Boolean>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BlockReportEventResponse> blockReportEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BlockReportEventResponse>() {
            @Override
            public BlockReportEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BLOCKREPORT_EVENT, log);
                BlockReportEventResponse typedResponse = new BlockReportEventResponse();
                typedResponse.log = log;
                typedResponse.datanode = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.blockpool = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.blocks = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.results = (List<Boolean>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BlockReportEventResponse> blockReportEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLOCKREPORT_EVENT));
        return blockReportEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> peek_seed(String _bp_id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PEEK_SEED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bp_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> verify(String _bp_id, List<BigInteger> _block_ids, List<BigInteger> _as, List<BigInteger> _bs1, List<BigInteger> _bs2, List<BigInteger> _cs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VERIFY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bp_id), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_block_ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_as, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_bs1, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_bs2, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_cs, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> dnode_init(String _bp_id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DNODE_INIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bp_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> add_digest(String _bp_id, BigInteger _block_id, byte[] _root) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADD_DIGEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bp_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_block_id), 
                new org.web3j.abi.datatypes.generated.Bytes32(_root)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> debug_digest(String _bp_id, BigInteger _block_id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEBUG_DIGEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bp_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_block_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> debug_seed(String _bp_id, String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEBUG_SEED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bp_id), 
                new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    @Deprecated
    public static Data load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Data(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Data load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Data(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Data load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Data(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Data load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Data(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Data> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Data> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Data> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Data> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class BlockReportEventResponse extends BaseEventResponse {
        public String datanode;

        public byte[] blockpool;

        public List<BigInteger> blocks;

        public List<Boolean> results;
    }
}
