package org.apache.hadoop.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class Data extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b5060405162002aa238038062002aa28339818101604052810190620000379190620000de565b81600281905550806003819055506040516200005390620000b9565b604051809103906000f08015801562000070573d6000803e3d6000fd5b50600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000143565b61149e806200160483390190565b600081519050620000d88162000129565b92915050565b60008060408385031215620000f257600080fd5b60006200010285828601620000c7565b92505060206200011585828601620000c7565b9150509250929050565b6000819050919050565b62000134816200011f565b81146200014057600080fd5b50565b6114b180620001536000396000f3fe608060405234801561001057600080fd5b506004361061007f576000357c0100000000000000000000000000000000000000000000000000000000900480630f8f2de3146100845780637175d0fb146100a25780639d879847146100d2578063b0f8c8a0146100dc578063c98f501b146100f8578063ddc0c2e314610114575b600080fd5b61008c610144565b6040516100999190611244565b60405180910390f35b6100bc60048036038101906100b79190610dc4565b61018b565b6040516100c99190611209565b60405180910390f35b6100da6101a7565b005b6100f660048036038101906100f19190610ded565b610208565b005b610112600480360381019061010d9190610c96565b610223565b005b61012e60048036038101906101299190610c6d565b610551565b60405161013b9190611244565b60405180910390f35b6000600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000806000838152602001908152602001600020549050919050565b60006101b1610144565b146101bb57600080fd5b6101c361059a565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b80600080848152602001908152602001600020819055505050565b600061022d610144565b1415801561023e575060008a8a9050115b801561025a5750600254888890508161025357fe5b048a8a9050145b801561026b57508585905088889050145b801561027c57508383905086869050145b801561028d57508181905084849050145b61029657600080fd5b6104fa6040518060a001604052808c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018a8a808060200260200160405190810160405280939291908181526020016000905b82821015610364578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050508152602001906001019061030d565b505050505081526020018888808060200260200160405190810160405280939291908181526020016000905b828210156103e7578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610390565b505050505081526020018686808060200260200160405190810160405280939291908181526020016000905b8282101561046a578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610413565b505050505081526020018484808060200260200160405190810160405280939291908181526020016000905b828210156104ed578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610496565b50505050508152506105cd565b61050261059a565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006105c842326040516020016105b2929190611133565b60405160208183030381529060405260006108d3565b905090565b606081600001515167ffffffffffffffff811180156105eb57600080fd5b5060405190808252806020026020018201604052801561061a5781602001602082028036833780820191505090505b509050610625610b42565b60005b83600001515181101561087957600183828151811061064357fe5b6020026020010190151590811515815250506106758460000151828151811061066857fe5b6020026020010151610931565b915060005b60025481101561086b576106a983602001518660000151848151811061069c57fe5b6020026020010151610b0b565b8360200181815250506003548360200151816106c157fe5b0683600001516000600a81106106d357fe5b602002018181525050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e27046e18660200151836002548602018151811061073057fe5b602002602001015160405180604001604052808960400151866002548902018151811061075957fe5b602002602001015181526020018960600151866002548902018151811061077c57fe5b60200260200101518152508860800151856002548802018151811061079d57fe5b602002602001015187600001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107e5949392919061118b565b60206040518083038186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108359190610d9b565b61085e57600084838151811061084757fe5b60200260200101901515908115158152505061086b565b808060010191505061067a565b508080600101915050610628565b503273ffffffffffffffffffffffffffffffffffffffff167f832d24d62f00c7832e45c669a1d1cb81f45a875efcc77b77fe439152595874428460000151846040516108c69291906111d2565b60405180910390a2505050565b6000602082018351101561091c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091390611224565b60405180910390fd5b60008260200184015190508091505092915050565b610939610b42565b610941610b42565b610949610144565b816020018181525050600080600085815260200190815260200160002054905063ffffffff81600190041682600001516001600a811061098557fe5b60200201818152505063ffffffff602082908060020a8204915050600190041682600001516002600a81106109b657fe5b60200201818152505063ffffffff604082908060020a8204915050600190041682600001516003600a81106109e757fe5b60200201818152505063ffffffff606082908060020a8204915050600190041682600001516004600a8110610a1857fe5b60200201818152505063ffffffff608082908060020a8204915050600190041682600001516005600a8110610a4957fe5b60200201818152505063ffffffff60a082908060020a8204915050600190041682600001516006600a8110610a7a57fe5b60200201818152505063ffffffff60c082908060020a8204915050600190041682600001516007600a8110610aab57fe5b60200201818152505063ffffffff60e082908060020a8204915050600190041682600001516008600a8110610adc57fe5b602002018181525050600182600001516009600a8110610af857fe5b6020020181815250508192505050919050565b60008282604051602001610b2092919061115f565b6040516020818303038152906040528051906020012060019004905092915050565b6040518060400160405280610b55610b62565b8152602001600081525090565b604051806101400160405280600a90602082028036833780820191505090505090565b600081359050610b948161141f565b92915050565b60008083601f840112610bac57600080fd5b8235905067ffffffffffffffff811115610bc557600080fd5b602083019150836040820283011115610bdd57600080fd5b9250929050565b60008083601f840112610bf657600080fd5b8235905067ffffffffffffffff811115610c0f57600080fd5b602083019150836020820283011115610c2757600080fd5b9250929050565b600081519050610c3d81611436565b92915050565b600081359050610c528161144d565b92915050565b600081359050610c6781611464565b92915050565b600060208284031215610c7f57600080fd5b6000610c8d84828501610b85565b91505092915050565b60008060008060008060008060008060a08b8d031215610cb557600080fd5b60008b013567ffffffffffffffff811115610ccf57600080fd5b610cdb8d828e01610be4565b9a509a505060208b013567ffffffffffffffff811115610cfa57600080fd5b610d068d828e01610b9a565b985098505060408b013567ffffffffffffffff811115610d2557600080fd5b610d318d828e01610b9a565b965096505060608b013567ffffffffffffffff811115610d5057600080fd5b610d5c8d828e01610b9a565b945094505060808b013567ffffffffffffffff811115610d7b57600080fd5b610d878d828e01610b9a565b92509250509295989b9194979a5092959850565b600060208284031215610dad57600080fd5b6000610dbb84828501610c2e565b91505092915050565b600060208284031215610dd657600080fd5b6000610de484828501610c58565b91505092915050565b60008060408385031215610e0057600080fd5b6000610e0e85828601610c58565b9250506020610e1f85828601610c43565b9150509250929050565b6000610e358383610f94565b60408301905092915050565b6000610e4d83836110a0565b60208301905092915050565b6000610e6583836110fe565b60208301905092915050565b610e82610e7d82611386565b6113d8565b82525050565b610e918161129d565b610e9b8184611315565b9250610ea68261125f565b8060005b83811015610ed7578151610ebe8782610e29565b9650610ec9836112d4565b925050600181019050610eaa565b505050505050565b6000610eea826112a8565b610ef48185611320565b9350610eff83611269565b8060005b83811015610f30578151610f178882610e41565b9750610f22836112e1565b925050600181019050610f03565b5085935050505092915050565b610f46816112b3565b610f508184611331565b9250610f5b82611279565b8060005b83811015610f8c578151610f738782610e59565b9650610f7e836112ee565b925050600181019050610f5f565b505050505050565b610f9d816112be565b610fa7818461133c565b9250610fb282611283565b8060005b83811015610fe3578151610fca8782610e59565b9650610fd5836112fb565b925050600181019050610fb6565b505050505050565b610ff4816112be565b610ffe8184611347565b925061100982611283565b8060005b8381101561103a5781516110218782610e59565b965061102c836112fb565b92505060018101905061100d565b505050505050565b600061104d826112c9565b6110578185611352565b93506110628361128d565b8060005b8381101561109357815161107a8882610e59565b975061108583611308565b925050600181019050611066565b5085935050505092915050565b6110a981611398565b82525050565b6110b8816113a4565b82525050565b60006110cb601483611363565b91507f736c6963696e67206f7574206f662072616e67650000000000000000000000006000830152602082019050919050565b611107816113ce565b82525050565b611116816113ce565b82525050565b61112d611128826113ce565b6113fc565b82525050565b600061113f828561111c565b60208201915061114f8284610e71565b6014820191508190509392505050565b600061116b828561111c565b60208201915061117b828461111c565b6020820191508190509392505050565b6000610240820190506111a16000830187610feb565b6111ae6040830186610e88565b6111bb60c0830185610feb565b6111c9610100830184610f3d565b95945050505050565b600060408201905081810360008301526111ec8185611042565b905081810360208301526112008184610edf565b90509392505050565b600060208201905061121e60008301846110af565b92915050565b6000602082019050818103600083015261123d816110be565b9050919050565b6000602082019050611259600083018461110d565b92915050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050919050565b6000819050602082019050919050565b600060029050919050565b600081519050919050565b6000600a9050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061137f826113ae565b9050919050565b6000611391826113ae565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006113e3826113ea565b9050919050565b60006113f582611406565b9050919050565b6000819050919050565b60006c0100000000000000000000000082029050919050565b61142881611374565b811461143357600080fd5b50565b61143f81611398565b811461144a57600080fd5b50565b611456816113a4565b811461146157600080fd5b50565b61146d816113ce565b811461147857600080fd5b5056fea2646970667358221220affb19275f3187bd96b6e43ea398d1f221f409fd3ab2241f60a3cd0c7942310e64736f6c634300060c0033608060405234801561001057600080fd5b5061147e806100206000396000f3fe608060405234801561001057600080fd5b5060043610610048576000357c010000000000000000000000000000000000000000000000000000000090048063e27046e11461004d575b600080fd5b6101ad600480360361024081101561006457600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b82821015610119578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100c5565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101c5565b60405180821515815260200191505060405180910390f35b60006101cf611306565b6040518060400160405280876000600281106101e757fe5b60200201518152602001876001600281106101fe57fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061023157fe5b602002015160006002811061024257fe5b602002015181526020018860006002811061025957fe5b602002015160016002811061026a57fe5b6020020151815250815260200160405180604001604052808860016002811061028f57fe5b60200201516000600281106102a057fe5b60200201518152602001886001600281106102b757fe5b60200201516001600281106102c857fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102f357fe5b602002015181526020018560016002811061030a57fe5b602002015181525081604001819052506060600a67ffffffffffffffff8111801561033457600080fd5b506040519080825280602002602001820160405280156103635781602001602082028036833780820191505090505b50905060005b600a8110156103a8578481600a811061037e57fe5b602002015182828151811061038f57fe5b6020026020010181815250508080600101915050610369565b5060006103b582846103d5565b14156103c6576001925050506103cd565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050610403611339565b61040b610544565b905080608001515160018651011461042257600080fd5b61042a611380565b6040518060400160405280600081526020016000815250905060005b86518110156104bd578387828151811061045c57fe5b60200260200101511061046e57600080fd5b6104ae826104a98560800151600185018151811061048857fe5b60200260200101518a858151811061049c57fe5b6020026020010151610d30565b610dc2565b91508080600101915050610446565b506104e08183608001516000815181106104d357fe5b6020026020010151610dc2565b9050610526856000015186602001516104f884610e73565b856040015161050a8a60400151610e73565b876060015161051c8960000151610e73565b8960200151610f0d565b610536576001935050505061053e565b600093505050505b92915050565b61054c611339565b60405180604001604052807f1e707c57fab7a0c92edad734f81ba7293754eea4b9e3a5f9a6c62ad0f8c898ef81526020017f08b90a7eb8419f5fb32d6edf5456f235f1c3fecf2f4e6dfddecc9f45fe5d9a648152508160000181905250604051806040016040528060405180604001604052807f043956ec89eabec7b540c2ee42c8d1f90d875e9d8fc34cd2c3ffe520a99a692a81526020017f2f10e6cf3c0dd07b2a85075d36f398ae1ee0710fb6288345db3f00e7fff23401815250815260200160405180604001604052807f0ff32874321eafba61adb78fc26d4b5a283ecfdbea3202b73d35f624e65464b281526020017f117e8134ce6a36c2883a3c0caca24a033c0f0c1b6739af11d3242881e68acb7c8152508152508160200181905250604051806040016040528060405180604001604052807f20e3295036a1f494811ff8698c8bc8546259a0a888e76019d676a318437d53c281526020017f0159a66c1b588bc7abe8f36cded9fa072acf4d7f69dc0c6b5928261d72d34b9e815250815260200160405180604001604052807f10a0c196afec6679c8df51a7a4aad51e419cb76a6ad2b463c3f6d0aa95d2e01881526020017f28c0c91a628e2feb39ffd9c73a4356a5e7dbd632d086715c027958dca8490bac8152508152508160400181905250604051806040016040528060405180604001604052807f17a7a5a0dbf4c330ca531e3cb14b84c67e6749d647e77510713c088d15bffa4b81526020017f077544ededf9ffbcf53ca85849ad2093ef5b49b7e1f12610ff8ec13f3ae2dcba815250815260200160405180604001604052807f099c9f46bb6e674112255bf8e3a9a5ad03dee4dce706706e5d374acbae0a3a8b81526020017f2aa84c1cda0424f155dfebb0f43accd5827cba30f39a87b6fcee656b19c907238152508152508160600181905250600b67ffffffffffffffff8111801561081057600080fd5b5060405190808252806020026020018201604052801561084a57816020015b610837611380565b81526020019060019003908161082f5790505b50816080018190525060405180604001604052807f2d44f8f7b17efcf75d862409d667776035fc427716199a0e6d1133a12404145481526020017f070b42818ddf4f3fb534405eb8c28a25de4f001c4bd68aa01e5f0305b235455d81525081608001516000815181106108b957fe5b602002602001018190525060405180604001604052807f04545568ad0a625c1ec95b6d5d9b71e8f0843107e6c0d32e8c9d8a8e61feee5a81526020017f26593d865384bbb571d194264f1158a4e8a6498a0ecb561105c18b0adaa27bde815250816080015160018151811061092a57fe5b602002602001018190525060405180604001604052807f1a8bf24515c91adba0f3b3fdd2d9699772cb1bc1610f85ffb97a6b6402faf47781526020017f2b57d9b7f063878a9dc33f23ae217db0fe6b8284153d346cadfd68a0ecd1355a815250816080015160028151811061099b57fe5b602002602001018190525060405180604001604052807f29f92f4664920fd6bc2fc687b88b7bcfcc7a154bf4c82326fe6ed1028dbd1a8781526020017f13670cc9f454c574f70c5259891f84733fa9820e0c76aefb2ee5cfd892cc1db48152508160800151600381518110610a0c57fe5b602002602001018190525060405180604001604052807f0ee172a19ff4fa12107964a02c63423b98862ab3b5dc296e19ee32439c913d7f81526020017eca87b6a68dd534f70c20eb427d4618e28001e8dc1dbe9023d14c090da9fd678152508160800151600481518110610a7c57fe5b602002602001018190525060405180604001604052807f0b007c251d6dd3b35de2ff66ce879547e42aee05d4950b1509e0a305b4632a4181526020017f22763bc64f1206bc1733704b627ac5156d234988d58e1022ba1f5017831d141a8152508160800151600581518110610aed57fe5b602002602001018190525060405180604001604052807f12593c1fee0501c7fbf8745295b3d5e247028800ced32fa6d3d2b27b81eddd7e81526020017f1edeb2a187d93229a16495fc1358d312d977cf85d57c1bd462b9005f705918f98152508160800151600681518110610b5e57fe5b602002602001018190525060405180604001604052807f3011a21d2b36b34d917147235023b5e2d6ffedebc69fbb40b81f12181062136981526020017f2bdf548e1e91f796dd598d18fe4b42f90c1a69bc76af3ec5f8b6e3abda4c6df78152508160800151600781518110610bcf57fe5b602002602001018190525060405180604001604052807f0c09fda3bfbb76e83605a5e414833ddf1367959dc123f16e80ffee8ba2debf8581526020017f079d3e5456ade254f48f3bb88d65b7e1076631345aca22c5ba79aedf5eade6b38152508160800151600881518110610c4057fe5b602002602001018190525060405180604001604052807f27ec0671e205d329eb7b4b255af40c4e42b2ddf5b03da0a85e9902ebbcaecc1c81526020017f12646705e77e34dfd936f0f9da9a3cc322a958f69705051ab532ac7be00270388152508160800151600981518110610cb157fe5b602002602001018190525060405180604001604052807f2b29d1e3180ca8f7a725408cd612c74325abe6baf9336535f91d2e56ed23ad5381526020017f1c43fd05339b3d571d1f7a76de5eea4ffa39bb9f1d56d1f554219d866609efe78152508160800151600a81518110610d2257fe5b602002602001018190525090565b610d38611380565b610d4061139a565b836000015181600060038110610d5257fe5b602002018181525050836020015181600160038110610d6d57fe5b6020020181815250508281600260038110610d8457fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610dad57610daf565bfe5b5080610dba57600080fd5b505092915050565b610dca611380565b610dd26113bc565b836000015181600060048110610de457fe5b602002018181525050836020015181600160048110610dff57fe5b602002018181525050826000015181600260048110610e1a57fe5b602002018181525050826020015181600360048110610e3557fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610e5e57610e60565bfe5b5080610e6b57600080fd5b505092915050565b610e7b611380565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610eb8575060008360200151145b15610edc576040518060400160405280600081526020016000815250915050610f08565b60405180604001604052808460000151815260200182856020015181610efe57fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610f2957600080fd5b50604051908082528060200260200182016040528015610f6357816020015b610f50611380565b815260200190600190039081610f485790505b5090506060600467ffffffffffffffff81118015610f8057600080fd5b50604051908082528060200260200182016040528015610fba57816020015b610fa76113de565b815260200190600190039081610f9f5790505b5090508a82600081518110610fcb57fe5b60200260200101819052508882600181518110610fe457fe5b60200260200101819052508682600281518110610ffd57fe5b6020026020010181905250848260038151811061101657fe5b6020026020010181905250898160008151811061102f57fe5b6020026020010181905250878160018151811061104857fe5b6020026020010181905250858160028151811061106157fe5b6020026020010181905250838160038151811061107a57fe5b602002602001018190525061108f828261109f565b9250505098975050505050505050565b600081518351146110af57600080fd5b600083519050600060068202905060608167ffffffffffffffff811180156110d657600080fd5b506040519080825280602002602001820160405280156111055781602001602082028036833780820191505090505b50905060005b838110156112a85786818151811061111f57fe5b60200260200101516000015182600060068402018151811061113d57fe5b60200260200101818152505086818151811061115557fe5b60200260200101516020015182600160068402018151811061117357fe5b60200260200101818152505085818151811061118b57fe5b6020026020010151600001516001600281106111a357fe5b60200201518260026006840201815181106111ba57fe5b6020026020010181815250508581815181106111d257fe5b6020026020010151600001516000600281106111ea57fe5b602002015182600360068402018151811061120157fe5b60200260200101818152505085818151811061121957fe5b60200260200101516020015160016002811061123157fe5b602002015182600460068402018151811061124857fe5b60200260200101818152505085818151811061126057fe5b60200260200101516020015160006002811061127857fe5b602002015182600560068402018151811061128f57fe5b602002602001018181525050808060010191505061110b565b506112b1611404565b6000602082602086026020860160086107d05a03fa905080600081146112d6576112d8565bfe5b50806112e357600080fd5b6000826000600181106112f257fe5b602002015114159550505050505092915050565b6040518060600160405280611319611380565b81526020016113266113de565b8152602001611333611380565b81525090565b6040518060a0016040528061134c611380565b81526020016113596113de565b81526020016113666113de565b81526020016113736113de565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806113f1611426565b81526020016113fe611426565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea26469706673582212209af6e9624e7fd507e833fe4ca3e20fff783597be30c08b424f1e41b1ba19af8964736f6c634300060c0033";

    public static final String FUNC_PEEK_SEED = "peek_seed";

    public static final String FUNC_VERIFY = "verify";

    public static final String FUNC_DNODE_INIT = "dnode_init";

    public static final String FUNC_ADD_DIGEST = "add_digest";

    public static final String FUNC_DEBUG_DIGEST = "debug_digest";

    public static final String FUNC_DEBUG_SEED = "debug_seed";

    public static final Event BLOCKREPORT_EVENT = new Event("BlockReport", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Data(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Data(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Data(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Data(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BlockReportEventResponse> getBlockReportEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BLOCKREPORT_EVENT, transactionReceipt);
        ArrayList<BlockReportEventResponse> responses = new ArrayList<BlockReportEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlockReportEventResponse typedResponse = new BlockReportEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.datanode = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.blocks = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.results = (List<Boolean>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BlockReportEventResponse> blockReportEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BlockReportEventResponse>() {
            @Override
            public BlockReportEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BLOCKREPORT_EVENT, log);
                BlockReportEventResponse typedResponse = new BlockReportEventResponse();
                typedResponse.log = log;
                typedResponse.datanode = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.blocks = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.results = (List<Boolean>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BlockReportEventResponse> blockReportEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLOCKREPORT_EVENT));
        return blockReportEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> peek_seed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PEEK_SEED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> verify(List<BigInteger> _block_ids, List<List<BigInteger>> _as, List<List<BigInteger>> _bs1, List<List<BigInteger>> _bs2, List<List<BigInteger>> _cs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VERIFY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_block_ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_as, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_bs1, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_bs2, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.StaticArray2>(
                        org.web3j.abi.datatypes.generated.StaticArray2.class,
                        org.web3j.abi.Utils.typeMap(_cs, org.web3j.abi.datatypes.generated.StaticArray2.class,
                org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> dnode_init() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DNODE_INIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> add_digest(BigInteger _block_id, byte[] _root) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADD_DIGEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_block_id), 
                new org.web3j.abi.datatypes.generated.Bytes32(_root)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> debug_digest(BigInteger _block_id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEBUG_DIGEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_block_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> debug_seed(String _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEBUG_SEED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Data load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Data(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Data load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Data(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Data load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Data(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Data load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Data(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Data> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Data> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Data> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Data> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _num_chall, BigInteger _num_chunks) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num_chall), 
                new org.web3j.abi.datatypes.generated.Uint256(_num_chunks)));
        return deployRemoteCall(Data.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class BlockReportEventResponse extends BaseEventResponse {
        public String datanode;

        public List<BigInteger> blocks;

        public List<Boolean> results;
    }
}
